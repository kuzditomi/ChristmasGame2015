var Cm2k15;
(function (Cm2k15) {
    var TileModel = (function () {
        function TileModel() {
            this.IsVisited = false;
        }
        return TileModel;
    })();
    Cm2k15.TileModel = TileModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var PlayerModel = (function () {
        function PlayerModel() {
        }
        PlayerModel.prototype.Move = function (direction) {
            switch (direction) {
                case Cm2k15.directions.Top:
                    this.Y--;
                    break;
                case Cm2k15.directions.Bottom:
                    this.Y++;
                    break;
                case Cm2k15.directions.Left:
                    this.X--;
                    break;
                case Cm2k15.directions.Right:
                    this.X++;
                    break;
                default:
                    return 'Move where?';
            }
            return "You have moved " + direction + ".";
        };
        return PlayerModel;
    })();
    Cm2k15.PlayerModel = PlayerModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    // Base class for pretty much everything on the map that has action
    var RoomBase = (function () {
        function RoomBase() {
        }
        return RoomBase;
    })();
    Cm2k15.RoomBase = RoomBase;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="RoomBase.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Cm2k15;
(function (Cm2k15) {
    var RoomModel = (function (_super) {
        __extends(RoomModel, _super);
        function RoomModel(description) {
            _super.call(this);
            this.Description = description;
        }
        return RoomModel;
    })(Cm2k15.RoomBase);
    Cm2k15.RoomModel = RoomModel;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="TileModel.ts"/>
/// <reference path="PlayerModel.ts"/>
/// <reference path="RoomModel.ts"/>
var Cm2k15;
(function (Cm2k15) {
    Cm2k15.directions = {
        Top: 'up',
        Right: 'right',
        Bottom: 'down',
        Left: 'left'
    };
    var MapModel = (function () {
        function MapModel(width, height) {
            this.Width = width;
            this.Height = height;
            this.Tiles = [];
            for (var i = 0; i < height; i++) {
                this.Tiles[i] = [];
                for (var j = 0; j < width; j++) {
                    this.Tiles[i][j] = new Cm2k15.TileModel();
                }
            }
            this.Player = new Cm2k15.PlayerModel();
            this.Player.X = 2;
            this.Player.Y = 2;
            this.Tiles[this.Player.X][this.Player.Y].IsVisited = true;
            this.Rooms = [];
            var randomRoom = new Cm2k15.RoomModel("Beleptel a szobaba");
            randomRoom.X = 4; //Math.floor(Math.random() * width);
            randomRoom.Y = 4; //Math.floor(Math.random() * height);
            console.log('house is ' + randomRoom.X + ':' + randomRoom.Y);
            this.Rooms.push(randomRoom);
            this.Tiles[randomRoom.X][randomRoom.Y].Room = randomRoom;
        }
        MapModel.prototype.MovePlayer = function (direction) {
            if ((this.Player.X == 0 && direction == Cm2k15.directions.Left) ||
                (this.Player.Y == 0 && direction == Cm2k15.directions.Top) ||
                (this.Player.X == this.Width - 1 && direction == Cm2k15.directions.Right) ||
                (this.Player.Y == this.Height - 1 && direction == Cm2k15.directions.Bottom)) {
                return "You can't leave this area, turn around!";
            }
            else {
                var response = this.Player.Move(direction);
                console.log('Player moved ' + this.Player.X + ':' + this.Player.Y);
                return response;
            }
        };
        return MapModel;
    })();
    Cm2k15.MapModel = MapModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var TileView = (function () {
        function TileView(row, col, size, element) {
            //console.log('gametile constructor:' + row + ',' + col);
            this.element = element;
            this.content = '';
            this.flags = ['tile'];
            this.initialize(row, col, size);
        }
        TileView.prototype.initialize = function (row, col, size) {
            this.element.style.top = row * size + 'px';
            this.element.style.left = col * size + 'px';
            this.element.style.width = this.element.style.height = size + 'px';
            this.element.className = 'tile';
        };
        TileView.prototype.Reset = function () {
            this.content = '';
        };
        TileView.prototype.Set = function (text) {
            this.content = text;
        };
        TileView.prototype.SetState = function (flag, on) {
            var index = this.flags.indexOf(flag);
            if (on && index == -1) {
                this.flags.push(flag);
                return;
            }
            if (!on && index != -1) {
                this.flags.splice(index, 1);
            }
        };
        TileView.prototype.Display = function () {
            this.element.className = this.flags.join(' ');
            this.element.innerText = this.content;
        };
        return TileView;
    })();
    Cm2k15.TileView = TileView;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="TileView.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var MapView = (function () {
        function MapView(model) {
            // constants
            this.tileCount = 9;
            console.log('gamemap constructor');
            var mapElement = document.getElementById('map');
            var message = document.getElementById('message');
            // initialize game state
            this.model = model;
            // create tile views 
            var mapWidth = mapElement.clientWidth;
            var tileSize = mapWidth / this.tileCount;
            this.tiles = [];
            for (var i = 0; i < this.tileCount; i++) {
                this.tiles.push([]);
                for (var j = 0; j < this.tileCount; j++) {
                    var element = document.createElement('div');
                    this.tiles[i][j] = new Cm2k15.TileView(i, j, tileSize, element);
                    mapElement.appendChild(element);
                }
            }
        }
        MapView.prototype.Display = function () {
            var middle = Math.floor(this.tileCount / 2);
            var left = this.model.Player.X < (middle) ? 0
                : this.model.Player.X > (this.model.Width - 1 - middle) ? this.model.Width - this.tileCount
                    : this.model.Player.X - middle;
            var top = this.model.Player.Y < (middle) ? 0
                : this.model.Player.Y > (this.model.Height - 1 - middle) ? this.model.Height - this.tileCount
                    : this.model.Player.Y - middle;
            for (var i = 0; i < this.tileCount; i++) {
                for (var j = 0; j < this.tileCount; j++) {
                    var x = left + j;
                    var y = top + i;
                    var tile = this.tiles[i][j];
                    var tileState = this.model.Tiles[x][y];
                    if (x == this.model.Player.X && y == this.model.Player.Y) {
                        tile.Set('[x]');
                    }
                    else {
                        tile.Reset();
                    }
                    tile.SetState('visited', tileState.IsVisited);
                    tile.SetState('edge', x == 0 || x == this.model.Width - 1 || y == 0 || y == this.model.Height - 1);
                    var isRoom = this.model.Rooms.filter(function (room) { return room.X == x && room.Y == y; }).length > 0;
                    tile.SetState('room', isRoom);
                    tile.Display();
                }
            }
        };
        return MapView;
    })();
    Cm2k15.MapView = MapView;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var RoomView = (function () {
        function RoomView() {
            this.roomElement = document.getElementById('room');
        }
        RoomView.prototype.Draw = function (room) {
            if (!room) {
                this.roomElement.innerText = "";
                return;
            }
            this.roomElement.innerText = room.Description;
        };
        return RoomView;
    })();
    Cm2k15.RoomView = RoomView;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="model/MapModel.ts"/>
/// <reference path="view/MapView.ts"/>
/// <reference path="view/RoomView.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var Game = (function () {
        function Game() {
            var _this = this;
            // get dom elements
            var input = document.getElementById('command');
            var message = document.getElementById('message');
            this.messageElement = message;
            // initialize state and commands
            this.mapModel = new Cm2k15.MapModel(20, 20);
            this.commands = {};
            this.registerCommands();
            // subscribe events      
            input.onkeydown = function (e) {
                if (e.keyCode == 13) {
                    var command = input.value;
                    input.value = '';
                    _this.onCommand.call(_this, command);
                    return false;
                }
            };
            // create map view
            this.mapView = new Cm2k15.MapView(this.mapModel);
            this.mapView.Display();
            this.roomView = new Cm2k15.RoomView();
        }
        Game.prototype.registerCommands = function () {
            this.registerCommand('move', this.moveCommand);
        };
        Game.prototype.registerCommand = function (key, command) {
            this.commands[key] = command.bind(this);
        };
        Game.prototype.onCommand = function (text) {
            var parts = text.split(" ");
            var command = parts[0];
            var args = parts.length > 1 ? parts.splice(1, parts.length - 1) : [];
            if (this.commands[command]) {
                var result = this.commands[command].apply(this, args);
                this.message(result);
            }
            else {
                this.messageNoCommand();
            }
        };
        Game.prototype.moveCommand = function (direction) {
            var result = this.mapModel.MovePlayer(direction);
            var tile = this.mapModel.Tiles[this.mapModel.Player.X][this.mapModel.Player.Y];
            tile.IsVisited = true;
            this.roomView.Draw(tile.Room);
            this.mapView.Display();
            return result;
        };
        Game.prototype.message = function (text) {
            if (text) {
                var row = document.createElement('div');
                row.innerText = text;
                this.messageElement.appendChild(row);
                this.messageElement.scrollTop = this.messageElement.scrollHeight - this.messageElement.clientHeight;
            }
        };
        Game.prototype.messageNoCommand = function () {
            var messages = [
                "what?",
                "uhm...",
                "nope",
                "i dont think so"
            ];
            var message = messages[Math.floor(Math.random() * messages.length)];
            this.message(message);
        };
        return Game;
    })();
    Cm2k15.Game = Game;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="Game.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var game = new Cm2k15.Game();
})(Cm2k15 || (Cm2k15 = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsL1RpbGVNb2RlbC50cyIsIm1vZGVsL1BsYXllck1vZGVsLnRzIiwibW9kZWwvUm9vbUJhc2UudHMiLCJtb2RlbC9Sb29tTW9kZWwudHMiLCJtb2RlbC9NYXBNb2RlbC50cyIsInZpZXcvVGlsZVZpZXcudHMiLCJ2aWV3L01hcFZpZXcudHMiLCJ2aWV3L1Jvb21WaWV3LnRzIiwiR2FtZS50cyIsImFwcC50cyJdLCJuYW1lcyI6WyJDbTJrMTUiLCJDbTJrMTUuVGlsZU1vZGVsIiwiQ20yazE1LlRpbGVNb2RlbC5jb25zdHJ1Y3RvciIsIkNtMmsxNS5QbGF5ZXJNb2RlbCIsIkNtMmsxNS5QbGF5ZXJNb2RlbC5jb25zdHJ1Y3RvciIsIkNtMmsxNS5QbGF5ZXJNb2RlbC5Nb3ZlIiwiQ20yazE1LlJvb21CYXNlIiwiQ20yazE1LlJvb21CYXNlLmNvbnN0cnVjdG9yIiwiQ20yazE1LlJvb21Nb2RlbCIsIkNtMmsxNS5Sb29tTW9kZWwuY29uc3RydWN0b3IiLCJDbTJrMTUuTWFwTW9kZWwiLCJDbTJrMTUuTWFwTW9kZWwuY29uc3RydWN0b3IiLCJDbTJrMTUuTWFwTW9kZWwuTW92ZVBsYXllciIsIkNtMmsxNS5UaWxlVmlldyIsIkNtMmsxNS5UaWxlVmlldy5jb25zdHJ1Y3RvciIsIkNtMmsxNS5UaWxlVmlldy5pbml0aWFsaXplIiwiQ20yazE1LlRpbGVWaWV3LlJlc2V0IiwiQ20yazE1LlRpbGVWaWV3LlNldCIsIkNtMmsxNS5UaWxlVmlldy5TZXRTdGF0ZSIsIkNtMmsxNS5UaWxlVmlldy5EaXNwbGF5IiwiQ20yazE1Lk1hcFZpZXciLCJDbTJrMTUuTWFwVmlldy5jb25zdHJ1Y3RvciIsIkNtMmsxNS5NYXBWaWV3LkRpc3BsYXkiLCJDbTJrMTUuUm9vbVZpZXciLCJDbTJrMTUuUm9vbVZpZXcuY29uc3RydWN0b3IiLCJDbTJrMTUuUm9vbVZpZXcuRHJhdyIsIkNtMmsxNS5HYW1lIiwiQ20yazE1LkdhbWUuY29uc3RydWN0b3IiLCJDbTJrMTUuR2FtZS5yZWdpc3RlckNvbW1hbmRzIiwiQ20yazE1LkdhbWUucmVnaXN0ZXJDb21tYW5kIiwiQ20yazE1LkdhbWUub25Db21tYW5kIiwiQ20yazE1LkdhbWUubW92ZUNvbW1hbmQiLCJDbTJrMTUuR2FtZS5tZXNzYWdlIiwiQ20yazE1LkdhbWUubWVzc2FnZU5vQ29tbWFuZCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxNQUFNLENBU1o7QUFURCxXQUFPLE1BQU0sRUFBQyxDQUFDO0lBQ2JBO1FBSUVDO1lBQ0VDLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3pCQSxDQUFDQTtRQUNIRCxnQkFBQ0E7SUFBREEsQ0FQQUQsQUFPQ0MsSUFBQUQ7SUFQWUEsZ0JBQVNBLFlBT3JCQSxDQUFBQTtBQUNIQSxDQUFDQSxFQVRNLE1BQU0sS0FBTixNQUFNLFFBU1o7QUNURCxJQUFPLE1BQU0sQ0EwQlo7QUExQkQsV0FBTyxNQUFNLEVBQUMsQ0FBQztJQUNiQTtRQUFBRztRQXdCQUMsQ0FBQ0E7UUFwQlFELDBCQUFJQSxHQUFYQSxVQUFZQSxTQUFpQkE7WUFDM0JFLE1BQU1BLENBQUNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNsQkEsS0FBS0EsaUJBQVVBLENBQUNBLEdBQUdBO29CQUNqQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7b0JBQ1RBLEtBQUtBLENBQUNBO2dCQUNSQSxLQUFLQSxpQkFBVUEsQ0FBQ0EsTUFBTUE7b0JBQ3BCQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQTtvQkFDVEEsS0FBS0EsQ0FBQ0E7Z0JBQ1JBLEtBQUtBLGlCQUFVQSxDQUFDQSxJQUFJQTtvQkFDbEJBLElBQUlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBO29CQUNUQSxLQUFLQSxDQUFDQTtnQkFDUkEsS0FBS0EsaUJBQVVBLENBQUNBLEtBQUtBO29CQUNuQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7b0JBQ1RBLEtBQUtBLENBQUNBO2dCQUNSQTtvQkFDRUEsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0E7WUFDekJBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLGlCQUFpQkEsR0FBR0EsU0FBU0EsR0FBR0EsR0FBR0EsQ0FBQ0E7UUFDN0NBLENBQUNBO1FBQ0hGLGtCQUFDQTtJQUFEQSxDQXhCQUgsQUF3QkNHLElBQUFIO0lBeEJZQSxrQkFBV0EsY0F3QnZCQSxDQUFBQTtBQUNIQSxDQUFDQSxFQTFCTSxNQUFNLEtBQU4sTUFBTSxRQTBCWjtBQzFCRCxJQUFPLE1BQU0sQ0FZWjtBQVpELFdBQU8sTUFBTSxFQUFDLENBQUM7SUFFYkEsbUVBQW1FQTtJQUNuRUE7UUFNRU07UUFDQUMsQ0FBQ0E7UUFDSEQsZUFBQ0E7SUFBREEsQ0FSQU4sQUFRQ00sSUFBQU47SUFSWUEsZUFBUUEsV0FRcEJBLENBQUFBO0FBQ0hBLENBQUNBLEVBWk0sTUFBTSxLQUFOLE1BQU0sUUFZWjtBQ1pELG1DQUFtQzs7Ozs7O0FBRW5DLElBQU8sTUFBTSxDQU9aO0FBUEQsV0FBTyxNQUFNLEVBQUMsQ0FBQztJQUNiQTtRQUErQlEsNkJBQVFBO1FBQ3JDQSxtQkFBWUEsV0FBbUJBO1lBQzdCQyxpQkFBT0EsQ0FBQ0E7WUFDUkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsV0FBV0EsQ0FBQ0E7UUFDakNBLENBQUNBO1FBQ0hELGdCQUFDQTtJQUFEQSxDQUxBUixBQUtDUSxFQUw4QlIsZUFBUUEsRUFLdENBO0lBTFlBLGdCQUFTQSxZQUtyQkEsQ0FBQUE7QUFDSEEsQ0FBQ0EsRUFQTSxNQUFNLEtBQU4sTUFBTSxRQU9aO0FDVEQsb0NBQW9DO0FBQ3BDLHNDQUFzQztBQUN0QyxvQ0FBb0M7QUFFcEMsSUFBTyxNQUFNLENBOERaO0FBOURELFdBQU8sTUFBTSxFQUFDLENBQUM7SUFDRkEsaUJBQVVBLEdBQUdBO1FBQ3RCQSxHQUFHQSxFQUFFQSxJQUFJQTtRQUNUQSxLQUFLQSxFQUFFQSxPQUFPQTtRQUNkQSxNQUFNQSxFQUFFQSxNQUFNQTtRQUNkQSxJQUFJQSxFQUFFQSxNQUFNQTtLQUNiQSxDQUFDQTtJQUVGQTtRQVFFVSxrQkFBWUEsS0FBYUEsRUFBRUEsTUFBY0E7WUFDdkNDLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBO1lBQ25CQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUVyQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDaEJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO2dCQUNoQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ25CQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxLQUFLQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtvQkFDL0JBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLGdCQUFTQSxFQUFFQSxDQUFDQTtnQkFDckNBLENBQUNBO1lBQ0hBLENBQUNBO1lBRURBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLGtCQUFXQSxFQUFFQSxDQUFDQTtZQUNoQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDbEJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRWxCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUUxREEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFaEJBLElBQUlBLFVBQVVBLEdBQUdBLElBQUlBLGdCQUFTQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBO1lBQ3JEQSxVQUFVQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxvQ0FBb0NBO1lBQ3REQSxVQUFVQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxxQ0FBcUNBO1lBRXZEQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxXQUFXQSxHQUFHQSxVQUFVQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUU3REEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7WUFFNUJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLFVBQVVBLENBQUNBO1FBQzNEQSxDQUFDQTtRQUVNRCw2QkFBVUEsR0FBakJBLFVBQWtCQSxTQUFTQTtZQUN6QkUsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsU0FBU0EsSUFBSUEsaUJBQVVBLENBQUNBLElBQUlBLENBQUNBO2dCQUN0REEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsU0FBU0EsSUFBSUEsaUJBQVVBLENBQUNBLEdBQUdBLENBQUNBO2dCQUNuREEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsSUFBSUEsU0FBU0EsSUFBSUEsaUJBQVVBLENBQUNBLEtBQUtBLENBQUNBO2dCQUNsRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsSUFBSUEsU0FBU0EsSUFBSUEsaUJBQVVBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN2RUEsTUFBTUEsQ0FBQ0EseUNBQXlDQSxDQUFDQTtZQUNuREEsQ0FBQ0E7WUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ05BLElBQUlBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO2dCQUUzQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRW5FQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUNsQkEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7UUFDSEYsZUFBQ0E7SUFBREEsQ0FyREFWLEFBcURDVSxJQUFBVjtJQXJEWUEsZUFBUUEsV0FxRHBCQSxDQUFBQTtBQUNIQSxDQUFDQSxFQTlETSxNQUFNLEtBQU4sTUFBTSxRQThEWjtBQ2xFRCxJQUFPLE1BQU0sQ0ErQ1o7QUEvQ0QsV0FBTyxNQUFNLEVBQUMsQ0FBQztJQUNiQTtRQUtFYSxrQkFBbUJBLEdBQVdBLEVBQUVBLEdBQVdBLEVBQUVBLElBQVlBLEVBQUVBLE9BQXVCQTtZQUNoRkMseURBQXlEQTtZQUN6REEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsT0FBT0EsQ0FBQ0E7WUFDdkJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBO1lBQ2xCQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUN0QkEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsRUFBQ0EsR0FBR0EsRUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDaENBLENBQUNBO1FBRU9ELDZCQUFVQSxHQUFsQkEsVUFBbUJBLEdBQVdBLEVBQUVBLEdBQVdBLEVBQUVBLElBQVlBO1lBQ3ZERSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDMUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1lBQ25FQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUNsQ0EsQ0FBQ0E7UUFFTUYsd0JBQUtBLEdBQVpBO1lBQ0VHLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBO1FBQ3BCQSxDQUFDQTtRQUVNSCxzQkFBR0EsR0FBVkEsVUFBV0EsSUFBWUE7WUFDckJJLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO1FBQ3RCQSxDQUFDQTtRQUVNSiwyQkFBUUEsR0FBZkEsVUFBZ0JBLElBQVlBLEVBQUVBLEVBQVdBO1lBQ3ZDSyxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUVyQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsRUFBRUEsSUFBSUEsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3BCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDdEJBLE1BQU1BLENBQUNBO1lBQ1RBLENBQUNBO1lBRURBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUNyQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDOUJBLENBQUNBO1FBQ0hBLENBQUNBO1FBRU1MLDBCQUFPQSxHQUFkQTtZQUNFTSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM5Q0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7UUFDeENBLENBQUNBO1FBQ0hOLGVBQUNBO0lBQURBLENBN0NBYixBQTZDQ2EsSUFBQWI7SUE3Q1lBLGVBQVFBLFdBNkNwQkEsQ0FBQUE7QUFDSEEsQ0FBQ0EsRUEvQ00sTUFBTSxLQUFOLE1BQU0sUUErQ1o7QUMvQ0QsbUNBQW1DO0FBRW5DLElBQU8sTUFBTSxDQXNFWjtBQXRFRCxXQUFPLE1BQU0sRUFBQyxDQUFDO0lBQ2JBO1FBVUVvQixpQkFBbUJBLEtBQWVBO1lBVGxDQyxZQUFZQTtZQUNaQSxjQUFTQSxHQUFHQSxDQUFDQSxDQUFDQTtZQVNaQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBO1lBRW5DQSxJQUFJQSxVQUFVQSxHQUFtQkEsUUFBUUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDaEVBLElBQUlBLE9BQU9BLEdBQW1CQSxRQUFRQSxDQUFDQSxjQUFjQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtZQUVqRUEsd0JBQXdCQTtZQUN4QkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFFbkJBLHFCQUFxQkE7WUFDckJBLElBQUlBLFFBQVFBLEdBQUdBLFVBQVVBLENBQUNBLFdBQVdBLENBQUNBO1lBQ3RDQSxJQUFJQSxRQUFRQSxHQUFHQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDaEJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO2dCQUN4Q0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtvQkFDeENBLElBQUlBLE9BQU9BLEdBQW1CQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtvQkFDNURBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLGVBQVFBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLFFBQVFBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO29CQUN6REEsVUFBVUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xDQSxDQUFDQTtZQUNIQSxDQUFDQTtRQUNIQSxDQUFDQTtRQUVNRCx5QkFBT0EsR0FBZEE7WUFDRUUsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFNUNBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO2tCQUN6Q0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0E7c0JBQ3ZGQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUVuQ0EsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7a0JBQ3hDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQTtzQkFDM0ZBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBO1lBRWpDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDeENBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO29CQUN4Q0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2pCQSxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFFaEJBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO29CQUM1QkEsSUFBSUEsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBRXZDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDekRBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO29CQUNsQkEsQ0FBQ0E7b0JBQUNBLElBQUlBLENBQUNBLENBQUNBO3dCQUNOQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtvQkFDZkEsQ0FBQ0E7b0JBRURBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLEVBQUVBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO29CQUM5Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBRW5HQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxL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R0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3JDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxZQUFZQSxDQUFDQTtZQUN0R0EsQ0FBQ0E7UUFDSEEsQ0FBQ0E7UUFFT04sK0JBQWdCQSxHQUF4QkE7WUFDRU8sSUFBSUEsUUFBUUEsR0FBR0E7Z0JBQ2JBLE9BQU9BO2dCQUNQQSxRQUFRQTtnQkFDUkEsTUFBTUE7Z0JBQ05BLGlCQUFpQkE7YUFDbEJBLENBQUNBO1lBRUZBLElBQUlBLE9BQU9BLEdBQUdBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUdBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1lBQ3BFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUN4QkEsQ0FBQ0E7UUFDSFAsV0FBQ0E7SUFBREEsQ0ExRkExQixBQTBGQzBCLElBQUExQjtJQTFGWUEsV0FBSUEsT0EwRmhCQSxDQUFBQTtBQUNIQSxDQUFDQSxFQTVGTSxNQUFNLEtBQU4sTUFBTSxRQTRGWjtBQ2hHRCwrQkFBK0I7QUFDL0IsSUFBTyxNQUFNLENBRVo7QUFGRCxXQUFPLE1BQU0sRUFBQyxDQUFDO0lBQ2JBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLE1BQU1BLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO0FBQy9CQSxDQUFDQSxFQUZNLE1BQU0sS0FBTixNQUFNLFFBRVoiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIENtMmsxNSB7XG4gIGV4cG9ydCBjbGFzcyBUaWxlTW9kZWwge1xuICAgIHB1YmxpYyBJc1Zpc2l0ZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIFJvb206IFJvb21CYXNlO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLklzVmlzaXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufSIsIm1vZHVsZSBDbTJrMTUge1xuICBleHBvcnQgY2xhc3MgUGxheWVyTW9kZWwge1xuICAgIHB1YmxpYyBYOiBudW1iZXI7XG4gICAgcHVibGljIFk6IG51bWJlcjtcblxuICAgIHB1YmxpYyBNb3ZlKGRpcmVjdGlvbjogc3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICBjYXNlIGRpcmVjdGlvbnMuVG9wOlxuICAgICAgICAgIHRoaXMuWS0tO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGRpcmVjdGlvbnMuQm90dG9tOlxuICAgICAgICAgIHRoaXMuWSsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGRpcmVjdGlvbnMuTGVmdDpcbiAgICAgICAgICB0aGlzLlgtLTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLlJpZ2h0OlxuICAgICAgICAgIHRoaXMuWCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAnTW92ZSB3aGVyZT8nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJZb3UgaGF2ZSBtb3ZlZCBcIiArIGRpcmVjdGlvbiArIFwiLlwiO1xuICAgIH1cbiAgfSBcbn0iLCJtb2R1bGUgQ20yazE1IHtcblxuICAvLyBCYXNlIGNsYXNzIGZvciBwcmV0dHkgbXVjaCBldmVyeXRoaW5nIG9uIHRoZSBtYXAgdGhhdCBoYXMgYWN0aW9uXG4gIGV4cG9ydCBjbGFzcyBSb29tQmFzZSB7XG4gICAgcHVibGljIFg6IG51bWJlcjtcbiAgICBwdWJsaWMgWTogbnVtYmVyO1xuXG4gICAgcHVibGljIERlc2NyaXB0aW9uOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG4gIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiUm9vbUJhc2UudHNcIi8+XG5cbm1vZHVsZSBDbTJrMTUge1xuICBleHBvcnQgY2xhc3MgUm9vbU1vZGVsIGV4dGVuZHMgUm9vbUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGRlc2NyaXB0aW9uOiBzdHJpbmcpIHtcbiAgICAgIHN1cGVyKCk7IFxuICAgICAgdGhpcy5EZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIH1cbiAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJUaWxlTW9kZWwudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiUGxheWVyTW9kZWwudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiUm9vbU1vZGVsLnRzXCIvPlxuXG5tb2R1bGUgQ20yazE1IHtcbiAgZXhwb3J0IHZhciBkaXJlY3Rpb25zID0ge1xuICAgIFRvcDogJ3VwJyxcbiAgICBSaWdodDogJ3JpZ2h0JyxcbiAgICBCb3R0b206ICdkb3duJyxcbiAgICBMZWZ0OiAnbGVmdCdcbiAgfTtcblxuICBleHBvcnQgY2xhc3MgTWFwTW9kZWwge1xuICAgIHB1YmxpYyBUaWxlczogVGlsZU1vZGVsW11bXTtcbiAgICBwdWJsaWMgUGxheWVyOiBQbGF5ZXJNb2RlbDtcbiAgICBwdWJsaWMgUm9vbXM6IFJvb21CYXNlW107XG5cbiAgICBwdWJsaWMgV2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgSGVpZ2h0OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgdGhpcy5XaWR0aCA9IHdpZHRoO1xuICAgICAgdGhpcy5IZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgIHRoaXMuVGlsZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgICAgdGhpcy5UaWxlc1tpXSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHdpZHRoOyBqKyspIHtcbiAgICAgICAgICB0aGlzLlRpbGVzW2ldW2pdID0gbmV3IFRpbGVNb2RlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuUGxheWVyID0gbmV3IFBsYXllck1vZGVsKCk7XG4gICAgICB0aGlzLlBsYXllci5YID0gMjtcbiAgICAgIHRoaXMuUGxheWVyLlkgPSAyO1xuXG4gICAgICB0aGlzLlRpbGVzW3RoaXMuUGxheWVyLlhdW3RoaXMuUGxheWVyLlldLklzVmlzaXRlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMuUm9vbXMgPSBbXTtcblxuICAgICAgdmFyIHJhbmRvbVJvb20gPSBuZXcgUm9vbU1vZGVsKFwiQmVsZXB0ZWwgYSBzem9iYWJhXCIpO1xuICAgICAgcmFuZG9tUm9vbS5YID0gNDsgLy9NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB3aWR0aCk7XG4gICAgICByYW5kb21Sb29tLlkgPSA0OyAvL01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGhlaWdodCk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdob3VzZSBpcyAnICsgcmFuZG9tUm9vbS5YICsgJzonICsgcmFuZG9tUm9vbS5ZKTtcblxuICAgICAgdGhpcy5Sb29tcy5wdXNoKHJhbmRvbVJvb20pO1xuXG4gICAgICB0aGlzLlRpbGVzW3JhbmRvbVJvb20uWF1bcmFuZG9tUm9vbS5ZXS5Sb29tID0gcmFuZG9tUm9vbTtcbiAgICB9XG5cbiAgICBwdWJsaWMgTW92ZVBsYXllcihkaXJlY3Rpb24pIHtcbiAgICAgIGlmICgodGhpcy5QbGF5ZXIuWCA9PSAwICYmIGRpcmVjdGlvbiA9PSBkaXJlY3Rpb25zLkxlZnQpIHx8XG4gICAgICAgICh0aGlzLlBsYXllci5ZID09IDAgJiYgZGlyZWN0aW9uID09IGRpcmVjdGlvbnMuVG9wKSB8fFxuICAgICAgICAodGhpcy5QbGF5ZXIuWCA9PSB0aGlzLldpZHRoIC0gMSAmJiBkaXJlY3Rpb24gPT0gZGlyZWN0aW9ucy5SaWdodCkgfHxcbiAgICAgICAgKHRoaXMuUGxheWVyLlkgPT0gdGhpcy5IZWlnaHQgLSAxICYmIGRpcmVjdGlvbiA9PSBkaXJlY3Rpb25zLkJvdHRvbSkpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGNhbid0IGxlYXZlIHRoaXMgYXJlYSwgdHVybiBhcm91bmQhXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzcG9uc2UgPSB0aGlzLlBsYXllci5Nb3ZlKGRpcmVjdGlvbik7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1BsYXllciBtb3ZlZCAnICsgdGhpcy5QbGF5ZXIuWCArICc6JyArIHRoaXMuUGxheWVyLlkpO1xuXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iLCJtb2R1bGUgQ20yazE1IHtcclxuICBleHBvcnQgY2xhc3MgVGlsZVZpZXcge1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHByaXZhdGUgZmxhZ3M6IHN0cmluZ1tdO1xyXG4gICAgcHJpdmF0ZSBjb250ZW50OiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgc2l6ZTogbnVtYmVyLCBlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAvL2NvbnNvbGUubG9nKCdnYW1ldGlsZSBjb25zdHJ1Y3RvcjonICsgcm93ICsgJywnICsgY29sKTtcclxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgdGhpcy5jb250ZW50ID0gJyc7XHJcbiAgICAgIHRoaXMuZmxhZ3MgPSBbJ3RpbGUnXTtcclxuICAgICAgdGhpcy5pbml0aWFsaXplKHJvdyxjb2wsc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgc2l6ZTogbnVtYmVyKXtcclxuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IHJvdypzaXplICsgJ3B4JztcclxuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmxlZnQgPSBjb2wqc2l6ZSArICdweCc7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBzaXplICsgJ3B4JztcclxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9ICd0aWxlJztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUmVzZXQoKXtcclxuICAgICAgdGhpcy5jb250ZW50ID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFNldCh0ZXh0OiBzdHJpbmcpe1xyXG4gICAgICB0aGlzLmNvbnRlbnQgPSB0ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRTdGF0ZShmbGFnOiBzdHJpbmcsIG9uOiBib29sZWFuKXtcclxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5mbGFncy5pbmRleE9mKGZsYWcpO1xyXG5cclxuICAgICAgaWYob24gJiYgaW5kZXggPT0gLTEpe1xyXG4gICAgICAgIHRoaXMuZmxhZ3MucHVzaChmbGFnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKCFvbiAmJiBpbmRleCAhPSAtMSl7IFxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBEaXNwbGF5KCl7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLmZsYWdzLmpvaW4oJyAnKTtcclxuICAgICAgdGhpcy5lbGVtZW50LmlubmVyVGV4dCA9IHRoaXMuY29udGVudDtcclxuICAgIH1cclxuICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiVGlsZVZpZXcudHNcIi8+XHJcblxyXG5tb2R1bGUgQ20yazE1IHtcclxuICBleHBvcnQgY2xhc3MgTWFwVmlldyB7XHJcbiAgICAvLyBjb25zdGFudHNcclxuICAgIHRpbGVDb3VudCA9IDk7XHJcblxyXG4gICAgLy8gdmlld3NcclxuICAgIHRpbGVzOiBUaWxlVmlld1tdW107XHJcblxyXG4gICAgLy8gbW9kZWxcclxuICAgIG1vZGVsOiBNYXBNb2RlbDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IobW9kZWw6IE1hcE1vZGVsKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdnYW1lbWFwIGNvbnN0cnVjdG9yJyk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgbWFwRWxlbWVudCA9IDxIVE1MRGl2RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyk7XHJcbiAgICAgIHZhciBtZXNzYWdlID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJyk7XHJcblxyXG4gICAgICAvLyBpbml0aWFsaXplIGdhbWUgc3RhdGVcclxuICAgICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xyXG5cclxuICAgICAgLy8gY3JlYXRlIHRpbGUgdmlld3MgXHJcbiAgICAgIHZhciBtYXBXaWR0aCA9IG1hcEVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICAgIHZhciB0aWxlU2l6ZSA9IG1hcFdpZHRoIC8gdGhpcy50aWxlQ291bnQ7XHJcbiAgICAgIHRoaXMudGlsZXMgPSBbXTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRpbGVDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy50aWxlcy5wdXNoKFtdKTtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMudGlsZUNvdW50OyBqKyspIHtcclxuICAgICAgICAgIHZhciBlbGVtZW50ID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgdGhpcy50aWxlc1tpXVtqXSA9IG5ldyBUaWxlVmlldyhpLCBqLCB0aWxlU2l6ZSwgZWxlbWVudCk7XHJcbiAgICAgICAgICBtYXBFbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpOyBcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgRGlzcGxheSgpIHtcclxuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IodGhpcy50aWxlQ291bnQgLyAyKTtcclxuXHJcbiAgICAgIHZhciBsZWZ0ID0gdGhpcy5tb2RlbC5QbGF5ZXIuWCA8IChtaWRkbGUpID8gMFxyXG4gICAgICAgIDogdGhpcy5tb2RlbC5QbGF5ZXIuWCA+ICh0aGlzLm1vZGVsLldpZHRoIC0gMSAtIG1pZGRsZSkgPyB0aGlzLm1vZGVsLldpZHRoIC0gdGhpcy50aWxlQ291bnRcclxuICAgICAgICAgIDogdGhpcy5tb2RlbC5QbGF5ZXIuWCAtIG1pZGRsZTtcclxuXHJcbiAgICAgIHZhciB0b3AgPSB0aGlzLm1vZGVsLlBsYXllci5ZIDwgKG1pZGRsZSkgPyAwXHJcbiAgICAgICAgOiB0aGlzLm1vZGVsLlBsYXllci5ZID4gKHRoaXMubW9kZWwuSGVpZ2h0IC0gMSAtIG1pZGRsZSkgPyB0aGlzLm1vZGVsLkhlaWdodCAtIHRoaXMudGlsZUNvdW50XHJcbiAgICAgICAgOiB0aGlzLm1vZGVsLlBsYXllci5ZIC0gbWlkZGxlO1xyXG5cclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRpbGVDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnRpbGVDb3VudDsgaisrKSB7XHJcbiAgICAgICAgICB2YXIgeCA9IGxlZnQgKyBqO1xyXG4gICAgICAgICAgdmFyIHkgPSB0b3AgKyBpO1xyXG5cclxuICAgICAgICAgIHZhciB0aWxlID0gdGhpcy50aWxlc1tpXVtqXTtcclxuICAgICAgICAgIHZhciB0aWxlU3RhdGUgPSB0aGlzLm1vZGVsLlRpbGVzW3hdW3ldO1xyXG5cclxuICAgICAgICAgIGlmICh4ID09IHRoaXMubW9kZWwuUGxheWVyLlggJiYgeSA9PSB0aGlzLm1vZGVsLlBsYXllci5ZKSB7XHJcbiAgICAgICAgICAgIHRpbGUuU2V0KCdbeF0nKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRpbGUuUmVzZXQoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aWxlLlNldFN0YXRlKCd2aXNpdGVkJywgdGlsZVN0YXRlLklzVmlzaXRlZCk7XHJcbiAgICAgICAgICB0aWxlLlNldFN0YXRlKCdlZGdlJywgeCA9PSAwIHx8IHggPT0gdGhpcy5tb2RlbC5XaWR0aCAtIDEgfHwgeSA9PSAwIHx8IHkgPT0gdGhpcy5tb2RlbC5IZWlnaHQgLSAxKTtcclxuXHJcbiAgICAgICAgICB2YXIgaXNSb29tID0gdGhpcy5tb2RlbC5Sb29tcy5maWx0ZXIocm9vbSA9PiByb29tLlggPT0geCAmJiByb29tLlkgPT0geSkubGVuZ3RoID4gMDtcclxuICAgICAgICAgIHRpbGUuU2V0U3RhdGUoJ3Jvb20nLCBpc1Jvb20pO1xyXG5cclxuICAgICAgICAgIHRpbGUuRGlzcGxheSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufSIsIm1vZHVsZSBDbTJrMTUge1xyXG4gIGV4cG9ydCBjbGFzcyBSb29tVmlldyB7XHJcbiAgICBwcml2YXRlIHJvb21FbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5yb29tRWxlbWVudCA9IDxIVE1MRGl2RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vbScpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBEcmF3KHJvb206IFJvb21Nb2RlbCkge1xyXG4gICAgICBpZiAoIXJvb20pIHtcclxuICAgICAgICB0aGlzLnJvb21FbGVtZW50LmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnJvb21FbGVtZW50LmlubmVyVGV4dCA9IHJvb20uRGVzY3JpcHRpb247XHJcblxyXG4gICAgfVxyXG4gIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtb2RlbC9NYXBNb2RlbC50c1wiLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInZpZXcvTWFwVmlldy50c1wiLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInZpZXcvUm9vbVZpZXcudHNcIi8+XHJcblxyXG5tb2R1bGUgQ20yazE1IHtcclxuICBleHBvcnQgY2xhc3MgR2FtZSB7XHJcbiAgICBwcml2YXRlIG1hcFZpZXc6IE1hcFZpZXc7XHJcbiAgICBwcml2YXRlIG1hcE1vZGVsOiBNYXBNb2RlbDtcclxuXHJcbiAgICBwcml2YXRlIHJvb21WaWV3OiBSb29tVmlldztcclxuICAgICBcclxuICAgIHByaXZhdGUgY29tbWFuZHM6IHsgW2tleTogc3RyaW5nXTogKGFyZ3MpID0+IGFueSB9O1xyXG4gICAgXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIGdldCBkb20gZWxlbWVudHNcclxuICAgICAgdmFyIGlucHV0ID0gPEhUTUxUZXh0QXJlYUVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbW1hbmQnKTtcclxuICAgICAgdmFyIG1lc3NhZ2UgPSA8SFRNTERpdkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UnKTtcclxuICAgICAgdGhpcy5tZXNzYWdlRWxlbWVudCA9IG1lc3NhZ2U7XHJcblxyXG4gICAgICAvLyBpbml0aWFsaXplIHN0YXRlIGFuZCBjb21tYW5kc1xyXG4gICAgICB0aGlzLm1hcE1vZGVsID0gbmV3IE1hcE1vZGVsKDIwLDIwKTtcclxuICAgICAgdGhpcy5jb21tYW5kcyA9IHt9O1xyXG4gICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZHMoKTtcclxuXHJcbiAgICAgIC8vIHN1YnNjcmliZSBldmVudHMgICAgICBcclxuICAgICAgaW5wdXQub25rZXlkb3duID0gKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09IDEzKSB7XHJcbiAgICAgICAgICB2YXIgY29tbWFuZCA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgIHRoaXMub25Db21tYW5kLmNhbGwodGhpcywgY29tbWFuZCk7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gY3JlYXRlIG1hcCB2aWV3XHJcbiAgICAgIHRoaXMubWFwVmlldyA9IG5ldyBNYXBWaWV3KHRoaXMubWFwTW9kZWwpO1xyXG4gICAgICB0aGlzLm1hcFZpZXcuRGlzcGxheSgpO1xyXG5cclxuICAgICAgdGhpcy5yb29tVmlldyA9IG5ldyBSb29tVmlldygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVnaXN0ZXJDb21tYW5kcygpIHtcclxuICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoJ21vdmUnLCB0aGlzLm1vdmVDb21tYW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlZ2lzdGVyQ29tbWFuZChrZXk6IHN0cmluZywgY29tbWFuZDogKGFyZ3MpID0+IGFueSkge1xyXG4gICAgICB0aGlzLmNvbW1hbmRzW2tleV0gPSBjb21tYW5kLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNvbW1hbmQodGV4dCkge1xyXG4gICAgICB2YXIgcGFydHMgPSB0ZXh0LnNwbGl0KFwiIFwiKTtcclxuICAgICAgdmFyIGNvbW1hbmQgPSBwYXJ0c1swXTtcclxuICAgICAgdmFyIGFyZ3MgPSBwYXJ0cy5sZW5ndGggPiAxID8gcGFydHMuc3BsaWNlKDEsIHBhcnRzLmxlbmd0aCAtIDEpIDogW107XHJcbiAgICAgIGlmICh0aGlzLmNvbW1hbmRzW2NvbW1hbmRdKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY29tbWFuZHNbY29tbWFuZF0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlKHJlc3VsdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlTm9Db21tYW5kKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1vdmVDb21tYW5kKGRpcmVjdGlvbikge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5tYXBNb2RlbC5Nb3ZlUGxheWVyKGRpcmVjdGlvbik7XHJcbiAgICAgIHZhciB0aWxlID0gdGhpcy5tYXBNb2RlbC5UaWxlc1t0aGlzLm1hcE1vZGVsLlBsYXllci5YXVt0aGlzLm1hcE1vZGVsLlBsYXllci5ZXTtcclxuICAgICAgdGlsZS5Jc1Zpc2l0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgdGhpcy5yb29tVmlldy5EcmF3KHRpbGUuUm9vbSk7XHJcbiAgICAgIHRoaXMubWFwVmlldy5EaXNwbGF5KCk7XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWVzc2FnZSh0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgaWYgKHRleHQpIHtcclxuICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcm93LmlubmVyVGV4dCA9IHRleHQ7XHJcblxyXG4gICAgICAgIHRoaXMubWVzc2FnZUVsZW1lbnQuYXBwZW5kQ2hpbGQocm93KTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VFbGVtZW50LnNjcm9sbFRvcCA9IHRoaXMubWVzc2FnZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5tZXNzYWdlRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VOb0NvbW1hbmQoKSB7XHJcbiAgICAgIHZhciBtZXNzYWdlcyA9IFtcclxuICAgICAgICBcIndoYXQ/XCIsXHJcbiAgICAgICAgXCJ1aG0uLi5cIixcclxuICAgICAgICBcIm5vcGVcIixcclxuICAgICAgICBcImkgZG9udCB0aGluayBzb1wiXHJcbiAgICAgIF07XHJcblxyXG4gICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1lc3NhZ2VzLmxlbmd0aCldO1xyXG4gICAgICB0aGlzLm1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIkdhbWUudHNcIi8+XHJcbm1vZHVsZSBDbTJrMTUge1xyXG4gIHZhciBnYW1lID0gbmV3IENtMmsxNS5HYW1lKCk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
