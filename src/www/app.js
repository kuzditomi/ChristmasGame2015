var Cm2k15;
(function (Cm2k15) {
    var TileModel = (function () {
        function TileModel() {
            this.Visited = false;
        }
        return TileModel;
    })();
    Cm2k15.TileModel = TileModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var PlayerModel = (function () {
        function PlayerModel() {
        }
        PlayerModel.prototype.Move = function (direction) {
            switch (direction) {
                case Cm2k15.directions.Top:
                    this.Y--;
                    break;
                case Cm2k15.directions.Bottom:
                    this.Y++;
                    break;
                case Cm2k15.directions.Left:
                    this.X--;
                    break;
                case Cm2k15.directions.Right:
                    this.X++;
                    break;
                default:
                    return 'Move where?';
            }
            return "You have moved " + direction + ".";
        };
        return PlayerModel;
    })();
    Cm2k15.PlayerModel = PlayerModel;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="TileModel.ts"/>
/// <reference path="PlayerModel.ts"/>
var Cm2k15;
(function (Cm2k15) {
    Cm2k15.directions = {
        Top: 'up',
        Right: 'right',
        Bottom: 'down',
        Left: 'left'
    };
    var MapModel = (function () {
        function MapModel(width, height) {
            this.Width = width;
            this.Height = height;
            this.Tiles = [];
            for (var i = 0; i < height; i++) {
                this.Tiles[i] = [];
                for (var j = 0; j < width; j++) {
                    this.Tiles[i][j] = new Cm2k15.TileModel();
                }
            }
            this.Player = new Cm2k15.PlayerModel();
            this.Player.X = 2;
            this.Player.Y = 2;
            this.Tiles[this.Player.X][this.Player.Y].Visited = true;
        }
        MapModel.prototype.MovePlayer = function (direction) {
            if ((this.Player.X == 0 && direction == Cm2k15.directions.Left) ||
                (this.Player.Y == 0 && direction == Cm2k15.directions.Top) ||
                (this.Player.X == this.Width - 1 && direction == Cm2k15.directions.Right) ||
                (this.Player.Y == this.Height - 1 && direction == Cm2k15.directions.Bottom)) {
                return "You can't leave this area, turn around!";
            }
            else {
                return this.Player.Move(direction);
            }
        };
        return MapModel;
    })();
    Cm2k15.MapModel = MapModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var TileView = (function () {
        function TileView(row, col, size, element) {
            //console.log('gametile constructor:' + row + ',' + col);
            this.element = element;
            this.content = '';
            this.flags = ['tile'];
            this.initialize(row, col, size);
        }
        TileView.prototype.initialize = function (row, col, size) {
            this.element.style.top = row * size + 'px';
            this.element.style.left = col * size + 'px';
            this.element.style.width = this.element.style.height = size + 'px';
            this.element.className = 'tile';
        };
        TileView.prototype.Reset = function () {
            this.content = '';
        };
        TileView.prototype.Set = function (text) {
            this.content = text;
        };
        TileView.prototype.SetState = function (flag, on) {
            var index = this.flags.indexOf(flag);
            if (on && index == -1) {
                this.flags.push(flag);
                return;
            }
            if (!on && index != -1) {
                this.flags.splice(index, 1);
            }
        };
        TileView.prototype.Display = function () {
            this.element.className = this.flags.join(' ');
            this.element.innerText = this.content;
        };
        return TileView;
    })();
    Cm2k15.TileView = TileView;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="TileView.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var MapView = (function () {
        function MapView(model) {
            // constants
            this.tileCount = 9;
            console.log('gamemap constructor');
            var mapElement = document.getElementById('map');
            var message = document.getElementById('message');
            // initialize game state
            this.model = model;
            // create tile views 
            var mapWidth = mapElement.clientWidth;
            var tileSize = mapWidth / this.tileCount;
            this.tiles = [];
            for (var i = 0; i < this.tileCount; i++) {
                this.tiles.push([]);
                for (var j = 0; j < this.tileCount; j++) {
                    var element = document.createElement('div');
                    this.tiles[i][j] = new Cm2k15.TileView(i, j, tileSize, element);
                    mapElement.appendChild(element);
                }
            }
        }
        MapView.prototype.Display = function () {
            var middle = Math.floor(this.tileCount / 2);
            var left = this.model.Player.X < (middle) ? 0
                : this.model.Player.X > (this.model.Width - middle) ? this.model.Width - this.tileCount
                    : this.model.Player.X - middle;
            var top = this.model.Player.Y < (middle) ? 0
                : this.model.Player.Y > (this.model.Height - middle) ? this.model.Height - this.tileCount
                    : this.model.Player.Y - middle;
            for (var i = 0; i < this.tileCount; i++) {
                for (var j = 0; j < this.tileCount; j++) {
                    var tile = this.tiles[i][j];
                    var tileState = this.model.Tiles[left + j][top + i];
                    if (top + i == this.model.Player.Y && left + j == this.model.Player.X) {
                        tile.Set('[x]');
                    }
                    else {
                        tile.Reset();
                    }
                    tile.SetState('visited', tileState.Visited);
                    tile.SetState('edge', left + j == 0 || left + j == this.tileCount - 1 || top + i == 0 || top + i == this.tileCount - 1);
                    tile.Display();
                }
            }
        };
        return MapView;
    })();
    Cm2k15.MapView = MapView;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="model/MapModel.ts"/>
/// <reference path="view/MapView.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var Game = (function () {
        function Game() {
            var _this = this;
            console.log('game constructor');
            // get dom elements
            var input = document.getElementById('command');
            var message = document.getElementById('message');
            this.messageElement = message;
            // initialize state and commands
            this.mapModel = new Cm2k15.MapModel(20, 20);
            this.commands = {};
            this.registerCommands();
            // subscribe events      
            input.onkeydown = function (e) {
                if (e.keyCode == 13) {
                    var command = input.value;
                    input.value = '';
                    _this.onCommand.call(_this, command);
                    return false;
                }
            };
            // create map view
            this.mapView = new Cm2k15.MapView(this.mapModel);
            this.mapView.Display();
        }
        Game.prototype.registerCommands = function () {
            this.registerCommand('move', this.moveCommand);
        };
        Game.prototype.registerCommand = function (key, command) {
            this.commands[key] = command.bind(this);
        };
        Game.prototype.onCommand = function (text) {
            var parts = text.split(" ");
            var command = parts[0];
            var args = parts.length > 1 ? parts.splice(1, parts.length - 1) : [];
            if (this.commands[command]) {
                var result = this.commands[command].apply(this, args);
                this.message(result);
            }
            else {
                this.messageNoCommand();
            }
        };
        Game.prototype.moveCommand = function (direction) {
            var result = this.mapModel.MovePlayer(direction);
            this.mapModel.Tiles[this.mapModel.Player.X][this.mapModel.Player.Y].Visited = true;
            this.mapView.Display();
            return result;
        };
        Game.prototype.message = function (text) {
            if (text) {
                var row = document.createElement('div');
                row.innerText = text;
                this.messageElement.appendChild(row);
                this.messageElement.scrollTop = this.messageElement.scrollHeight - this.messageElement.clientHeight;
            }
        };
        Game.prototype.messageNoCommand = function () {
            var messages = [
                "what?",
                "uhm...",
                "nope",
                "i dont think so"
            ];
            var message = messages[Math.floor(Math.random() * messages.length)];
            this.message(message);
        };
        return Game;
    })();
    Cm2k15.Game = Game;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="Game.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var game = new Cm2k15.Game();
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var RoomModel = (function () {
        function RoomModel() {
        }
        return RoomModel;
    })();
    Cm2k15.RoomModel = RoomModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var RoomView = (function () {
        function RoomView() {
            this.roomElement = document.getElementById('room');
        }
        return RoomView;
    })();
    Cm2k15.RoomView = RoomView;
})(Cm2k15 || (Cm2k15 = {}));

//# sourceMappingURL=data:application/json;base64,
