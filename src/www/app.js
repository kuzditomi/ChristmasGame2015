var Cm2k15;
(function (Cm2k15) {
    var GameTile = (function () {
        function GameTile(row, col, size, element) {
            //console.log('gametile constructor:' + row + ',' + col);
            this.element = element;
            this.content = '';
            this.flags = ['tile'];
            this.initialize(row, col, size);
        }
        GameTile.prototype.initialize = function (row, col, size) {
            this.element.style.top = row * size + 'px';
            this.element.style.left = col * size + 'px';
            this.element.style.width = this.element.style.height = size + 'px';
            this.element.className = 'tile';
        };
        GameTile.prototype.Reset = function () {
            this.content = '';
        };
        GameTile.prototype.Set = function (text) {
            this.content = text;
        };
        GameTile.prototype.SetState = function (flag, on) {
            var index = this.flags.indexOf(flag);
            if (on && index == -1) {
                this.flags.push(flag);
                return;
            }
            if (!on && index != -1) {
                this.flags.splice(index, 1);
            }
        };
        GameTile.prototype.Display = function () {
            this.element.className = this.flags.join(' ');
            this.element.innerText = this.content;
        };
        return GameTile;
    })();
    Cm2k15.GameTile = GameTile;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="GameTile.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var GameMap = (function () {
        function GameMap(map, state) {
            // constants
            this.tileCount = 9;
            console.log('gamemap constructor');
            // initialize game state
            this.state = state;
            // create tile views
            var mapWidth = map.clientWidth;
            var tileSize = mapWidth / this.tileCount;
            this.tiles = [];
            for (var i = 0; i < this.tileCount; i++) {
                this.tiles.push([]);
                for (var j = 0; j < this.tileCount; j++) {
                    var element = document.createElement('div');
                    this.tiles[i][j] = new Cm2k15.GameTile(i, j, tileSize, element);
                    map.appendChild(element);
                }
            }
        }
        GameMap.prototype.Display = function () {
            var middle = Math.floor(this.tileCount / 2);
            var left = this.state.Player.X < (middle) ? 0
                : this.state.Player.X > (this.state.Width - middle) ? this.state.Width - this.tileCount
                    : this.state.Player.X - middle;
            var top = this.state.Player.Y < (middle) ? 0
                : this.state.Player.Y > (this.state.Height - middle) ? this.state.Height - this.tileCount
                    : this.state.Player.Y - middle;
            for (var i = 0; i < this.tileCount; i++) {
                for (var j = 0; j < this.tileCount; j++) {
                    var tile = this.tiles[i][j];
                    var tileState = this.state.Tiles[left + j][top + i];
                    if (top + i == this.state.Player.Y && left + j == this.state.Player.X) {
                        tile.Set('[x]');
                    }
                    else {
                        tile.Reset();
                    }
                    tile.SetState('visited', tileState.Visited);
                    tile.SetState('edge', left + j == 0 || left + j == this.tileCount - 1 || top + i == 0 || top + i == this.tileCount - 1);
                    tile.Display();
                }
            }
        };
        return GameMap;
    })();
    Cm2k15.GameMap = GameMap;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var directions = {
        Top: 'up',
        Right: 'right',
        Bottom: 'down',
        Left: 'left'
    };
    var GameMapState = (function () {
        function GameMapState(width, height) {
            this.Width = width;
            this.Height = height;
            this.Tiles = [];
            for (var i = 0; i < height; i++) {
                this.Tiles[i] = [];
                for (var j = 0; j < width; j++) {
                    this.Tiles[i][j] = new TileState();
                }
            }
            this.Player = new PlayerState();
            this.Player.X = 2;
            this.Player.Y = 2;
            this.Tiles[this.Player.X][this.Player.Y].Visited = true;
        }
        GameMapState.prototype.MovePlayer = function (direction) {
            if ((this.Player.X == 0 && direction == directions.Left) ||
                (this.Player.Y == 0 && direction == directions.Top) ||
                (this.Player.X == this.Width - 1 && direction == directions.Right) ||
                (this.Player.Y == this.Height - 1 && direction == directions.Bottom)) {
                return "You can't leave this area, turn around!";
            }
            else {
                return this.Player.Move(direction);
            }
        };
        return GameMapState;
    })();
    Cm2k15.GameMapState = GameMapState;
    var TileState = (function () {
        function TileState() {
            this.Visited = false;
        }
        return TileState;
    })();
    var PlayerState = (function () {
        function PlayerState() {
        }
        PlayerState.prototype.Move = function (direction) {
            switch (direction) {
                case directions.Top:
                    this.Y--;
                    break;
                case directions.Bottom:
                    this.Y++;
                    break;
                case directions.Left:
                    this.X--;
                    break;
                case directions.Right:
                    this.X++;
                    break;
                default:
                    return 'Move where?';
            }
            return "You have moved " + direction + ".";
        };
        return PlayerState;
    })();
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="GameMap.ts"/>
/// <reference path="GameMapState.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var Game = (function () {
        function Game(map, input, message) {
            var _this = this;
            console.log('game constructor');
            this.state = new Cm2k15.GameMapState(20, 20);
            this.commands = {};
            this.map = new Cm2k15.GameMap(map, this.state);
            this.map.Display();
            this.messageElement = message;
            input.onkeydown = function (e) {
                if (e.keyCode == 13) {
                    var command = input.value;
                    input.value = '';
                    _this.onCommand.call(_this, command);
                    return false;
                }
            };
            this.registerCommands();
        }
        Game.prototype.registerCommands = function () {
            this.registerCommand('move', this.moveCommand);
        };
        Game.prototype.registerCommand = function (key, command) {
            this.commands[key] = command.bind(this);
        };
        Game.prototype.onCommand = function (text) {
            var parts = text.split(" ");
            var command = parts[0];
            var args = parts.length > 1 ? parts.splice(1, parts.length - 1) : [];
            if (this.commands[command]) {
                var result = this.commands[command].apply(this, args);
                this.message(result);
            }
            else {
                this.messageNoCommand();
            }
        };
        Game.prototype.moveCommand = function (direction) {
            var result = this.state.MovePlayer(direction);
            this.state.Tiles[this.state.Player.X][this.state.Player.Y].Visited = true;
            this.map.Display();
            return result;
        };
        Game.prototype.message = function (text) {
            if (text) {
                var row = document.createElement('div');
                row.innerText = text;
                this.messageElement.appendChild(row);
                this.messageElement.scrollTop = this.messageElement.scrollHeight - this.messageElement.clientHeight;
            }
        };
        Game.prototype.messageNoCommand = function () {
            var messages = [
                "what?",
                "uhm...",
                "nope",
                "i dont think so"
            ];
            var message = messages[Math.floor(Math.random() * messages.length)];
            this.message(message);
        };
        return Game;
    })();
    Cm2k15.Game = Game;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="Game.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var commandInput = document.getElementById('command');
    var map = document.getElementById('map');
    var message = document.getElementById('message');
    var game = new Cm2k15.Game(map, commandInput, message);
})(Cm2k15 || (Cm2k15 = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdhbWVUaWxlLnRzIiwiR2FtZU1hcC50cyIsIkdhbWVNYXBTdGF0ZS50cyIsIkdhbWUudHMiLCJhcHAudHMiXSwibmFtZXMiOlsiQ20yazE1IiwiQ20yazE1LkdhbWVUaWxlIiwiQ20yazE1LkdhbWVUaWxlLmNvbnN0cnVjdG9yIiwiQ20yazE1LkdhbWVUaWxlLmluaXRpYWxpemUiLCJDbTJrMTUuR2FtZVRpbGUuUmVzZXQiLCJDbTJrMTUuR2FtZVRpbGUuU2V0IiwiQ20yazE1LkdhbWVUaWxlLlNldFN0YXRlIiwiQ20yazE1LkdhbWVUaWxlLkRpc3BsYXkiLCJDbTJrMTUuR2FtZU1hcCIsIkNtMmsxNS5HYW1lTWFwLmNvbnN0cnVjdG9yIiwiQ20yazE1LkdhbWVNYXAuRGlzcGxheSIsIkNtMmsxNS5HYW1lTWFwU3RhdGUiLCJDbTJrMTUuR2FtZU1hcFN0YXRlLmNvbnN0cnVjdG9yIiwiQ20yazE1LkdhbWVNYXBTdGF0ZS5Nb3ZlUGxheWVyIiwiQ20yazE1LlRpbGVTdGF0ZSIsIkNtMmsxNS5UaWxlU3RhdGUuY29uc3RydWN0b3IiLCJDbTJrMTUuUGxheWVyU3RhdGUiLCJDbTJrMTUuUGxheWVyU3RhdGUuY29uc3RydWN0b3IiLCJDbTJrMTUuUGxheWVyU3RhdGUuTW92ZSIsIkNtMmsxNS5HYW1lIiwiQ20yazE1LkdhbWUuY29uc3RydWN0b3IiLCJDbTJrMTUuR2FtZS5yZWdpc3RlckNvbW1hbmRzIiwiQ20yazE1LkdhbWUucmVnaXN0ZXJDb21tYW5kIiwiQ20yazE1LkdhbWUub25Db21tYW5kIiwiQ20yazE1LkdhbWUubW92ZUNvbW1hbmQiLCJDbTJrMTUuR2FtZS5tZXNzYWdlIiwiQ20yazE1LkdhbWUubWVzc2FnZU5vQ29tbWFuZCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxNQUFNLENBK0NaO0FBL0NELFdBQU8sTUFBTSxFQUFDLENBQUM7SUFDYkE7UUFLRUMsa0JBQW1CQSxHQUFXQSxFQUFFQSxHQUFXQSxFQUFFQSxJQUFZQSxFQUFFQSxPQUF1QkE7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QUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBRTVDQSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtrQkFDdkNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEdBQUdBLE1BQU1BLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBO3NCQUNyRkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFFbkNBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO2tCQUN0Q0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0E7c0JBQ3ZGQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUVuQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7Z0JBQ3RDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtvQkFDdENBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO29CQUM1QkEsSUFBSUEsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBRXBEQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxHQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDaEVBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO29CQUNwQkEsQ0FBQ0E7b0JBQUNBLElBQUlBLENBQUNBLENBQUNBO3dCQUNKQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtvQkFDakJBLENBQUNBO29CQUVEQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxFQUFFQSxTQUFTQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtvQkFDNUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLEdBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLElBQUlBLEdBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLFNBQVNBLEdBQUNBLENBQUNBLElBQUlBLEdBQUdBLEdBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLEdBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLFNBQVNBLEdBQUNBLENB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Z0JBQ1BBLFFBQVFBO2dCQUNSQSxNQUFNQTtnQkFDTkEsaUJBQWlCQTthQUNsQkEsQ0FBQ0E7WUFFRkEsSUFBSUEsT0FBT0EsR0FBR0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsR0FBR0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUNIUCxXQUFDQTtJQUFEQSxDQS9FQW5CLEFBK0VDbUIsSUFBQW5CO0lBL0VZQSxXQUFJQSxPQStFaEJBLENBQUFBO0FBQ0hBLENBQUNBLEVBakZNLE1BQU0sS0FBTixNQUFNLFFBaUZaO0FDcEZELCtCQUErQjtBQUMvQixJQUFPLE1BQU0sQ0FLWjtBQUxELFdBQU8sTUFBTSxFQUFDLENBQUM7SUFDYkEsSUFBSUEsWUFBWUEsR0FBd0JBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO0lBQzNFQSxJQUFJQSxHQUFHQSxHQUFtQkEsUUFBUUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7SUFDekRBLElBQUlBLE9BQU9BLEdBQW1CQSxRQUFRQSxDQUFDQSxjQUFjQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtJQUNqRUEsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsRUFBRUEsWUFBWUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7QUFDekRBLENBQUNBLEVBTE0sTUFBTSxLQUFOLE1BQU0sUUFLWiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgQ20yazE1IHtcclxuICBleHBvcnQgY2xhc3MgR2FtZVRpbGUge1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHByaXZhdGUgZmxhZ3M6IHN0cmluZ1tdO1xyXG4gICAgcHJpdmF0ZSBjb250ZW50OiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgc2l6ZTogbnVtYmVyLCBlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAvL2NvbnNvbGUubG9nKCdnYW1ldGlsZSBjb25zdHJ1Y3RvcjonICsgcm93ICsgJywnICsgY29sKTtcclxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgdGhpcy5jb250ZW50ID0gJyc7XHJcbiAgICAgIHRoaXMuZmxhZ3MgPSBbJ3RpbGUnXTtcclxuICAgICAgdGhpcy5pbml0aWFsaXplKHJvdyxjb2wsc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgc2l6ZTogbnVtYmVyKXtcclxuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IHJvdypzaXplICsgJ3B4JztcclxuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmxlZnQgPSBjb2wqc2l6ZSArICdweCc7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBzaXplICsgJ3B4JztcclxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9ICd0aWxlJztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUmVzZXQoKXtcclxuICAgICAgdGhpcy5jb250ZW50ID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFNldCh0ZXh0OiBzdHJpbmcpe1xyXG4gICAgICB0aGlzLmNvbnRlbnQgPSB0ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRTdGF0ZShmbGFnOiBzdHJpbmcsIG9uOiBib29sZWFuKXtcclxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5mbGFncy5pbmRleE9mKGZsYWcpO1xyXG5cclxuICAgICAgaWYob24gJiYgaW5kZXggPT0gLTEpe1xyXG4gICAgICAgIHRoaXMuZmxhZ3MucHVzaChmbGFnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKCFvbiAmJiBpbmRleCAhPSAtMSl7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERpc3BsYXkoKXtcclxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9IHRoaXMuZmxhZ3Muam9pbignICcpO1xyXG4gICAgICB0aGlzLmVsZW1lbnQuaW5uZXJUZXh0ID0gdGhpcy5jb250ZW50O1xyXG4gICAgfVxyXG4gIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJHYW1lVGlsZS50c1wiLz5cclxuXHJcbm1vZHVsZSBDbTJrMTUge1xyXG4gICAgZXhwb3J0IGNsYXNzIEdhbWVNYXAge1xyXG4gICAgICAgIC8vIGNvbnN0YW50c1xyXG4gICAgICAgIHRpbGVDb3VudCA9IDk7XHJcblxyXG4gICAgICAgIC8vIHZpZXdzXHJcbiAgICAgICAgdGlsZXM6IEdhbWVUaWxlW11bXTtcclxuXHJcbiAgICAgICAgLy8gbW9kZWxcclxuICAgICAgICBzdGF0ZTogR2FtZU1hcFN0YXRlO1xyXG5cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IobWFwOkhUTUxEaXZFbGVtZW50LCBzdGF0ZTogR2FtZU1hcFN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnYW1lbWFwIGNvbnN0cnVjdG9yJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0aWFsaXplIGdhbWUgc3RhdGVcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG5cclxuICAgICAgICAgICAgLy8gY3JlYXRlIHRpbGUgdmlld3NcclxuICAgICAgICAgICAgdmFyIG1hcFdpZHRoID0gbWFwLmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICB2YXIgdGlsZVNpemUgPSBtYXBXaWR0aCAvIHRoaXMudGlsZUNvdW50O1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50aWxlQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWxlcy5wdXNoKFtdKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy50aWxlQ291bnQ7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGlsZXNbaV1bal0gPSBuZXcgR2FtZVRpbGUoaSwgaiwgdGlsZVNpemUsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcC5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIERpc3BsYXkoKSB7XHJcbiAgICAgICAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKHRoaXMudGlsZUNvdW50IC8gMik7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMuc3RhdGUuUGxheWVyLlggPCAobWlkZGxlKSA/IDBcclxuICAgICAgICAgICAgICAgIDogdGhpcy5zdGF0ZS5QbGF5ZXIuWCA+ICh0aGlzLnN0YXRlLldpZHRoIC0gbWlkZGxlKSA/IHRoaXMuc3RhdGUuV2lkdGggLSB0aGlzLnRpbGVDb3VudFxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLnN0YXRlLlBsYXllci5YIC0gbWlkZGxlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRvcCA9IHRoaXMuc3RhdGUuUGxheWVyLlkgPCAobWlkZGxlKSA/IDBcclxuICAgICAgICAgICAgICAgIDogdGhpcy5zdGF0ZS5QbGF5ZXIuWSA+ICh0aGlzLnN0YXRlLkhlaWdodCAtIG1pZGRsZSkgPyB0aGlzLnN0YXRlLkhlaWdodCAtIHRoaXMudGlsZUNvdW50XHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuc3RhdGUuUGxheWVyLlkgLSBtaWRkbGU7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGlsZUNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy50aWxlQ291bnQ7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aWxlID0gdGhpcy50aWxlc1tpXVtqXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGlsZVN0YXRlID0gdGhpcy5zdGF0ZS5UaWxlc1tsZWZ0ICsgal1bdG9wICsgaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b3AraSA9PSB0aGlzLnN0YXRlLlBsYXllci5ZICYmIGxlZnQraiA9PSB0aGlzLnN0YXRlLlBsYXllci5YKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbGUuU2V0KCdbeF0nKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aWxlLlJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aWxlLlNldFN0YXRlKCd2aXNpdGVkJywgdGlsZVN0YXRlLlZpc2l0ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbGUuU2V0U3RhdGUoJ2VkZ2UnLCBsZWZ0K2ogPT0gMCB8fCBsZWZ0K2ogPT0gdGhpcy50aWxlQ291bnQtMSB8fCB0b3AraSA9PSAwIHx8IHRvcCtpID09IHRoaXMudGlsZUNvdW50LTEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbGUuRGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIENtMmsxNSB7XHJcbiAgICB2YXIgZGlyZWN0aW9ucyA9IHtcclxuICAgICAgICBUb3AgOiAndXAnLFxyXG4gICAgICAgIFJpZ2h0OiAncmlnaHQnLFxyXG4gICAgICAgIEJvdHRvbTogJ2Rvd24nLFxyXG4gICAgICAgIExlZnQ6ICdsZWZ0J1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEdhbWVNYXBTdGF0ZSB7XHJcbiAgICAgICAgcHVibGljIFRpbGVzOiBUaWxlU3RhdGVbXVtdO1xyXG4gICAgICAgIHB1YmxpYyBQbGF5ZXI6IFBsYXllclN0YXRlO1xyXG5cclxuICAgICAgICBwdWJsaWMgV2lkdGg6IG51bWJlcjtcclxuICAgICAgICBwdWJsaWMgSGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLldpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuSGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5UaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlRpbGVzW2ldID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHdpZHRoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlRpbGVzW2ldW2pdID0gbmV3IFRpbGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLlBsYXllciA9IG5ldyBQbGF5ZXJTdGF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLlBsYXllci5YID0gMjtcclxuICAgICAgICAgICAgdGhpcy5QbGF5ZXIuWSA9IDI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLlRpbGVzW3RoaXMuUGxheWVyLlhdW3RoaXMuUGxheWVyLlldLlZpc2l0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIE1vdmVQbGF5ZXIoZGlyZWN0aW9uKXtcclxuICAgICAgICAgICAgaWYoKHRoaXMuUGxheWVyLlggPT0gMCAmJiBkaXJlY3Rpb24gPT0gZGlyZWN0aW9ucy5MZWZ0KXx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5QbGF5ZXIuWSA9PSAwICYmIGRpcmVjdGlvbiA9PSBkaXJlY3Rpb25zLlRvcCl8fFxyXG4gICAgICAgICAgICAgICAgKHRoaXMuUGxheWVyLlggPT0gdGhpcy5XaWR0aC0xICYmIGRpcmVjdGlvbiA9PSBkaXJlY3Rpb25zLlJpZ2h0KXx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5QbGF5ZXIuWSA9PSB0aGlzLkhlaWdodC0xICYmIGRpcmVjdGlvbiA9PSBkaXJlY3Rpb25zLkJvdHRvbSkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiWW91IGNhbid0IGxlYXZlIHRoaXMgYXJlYSwgdHVybiBhcm91bmQhXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5QbGF5ZXIuTW92ZShkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsYXNzIFRpbGVTdGF0ZSB7XHJcbiAgICAgICAgcHVibGljIFZpc2l0ZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICB0aGlzLlZpc2l0ZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3MgUGxheWVyU3RhdGUge1xyXG4gICAgICAgIHB1YmxpYyBYOiBudW1iZXI7XHJcbiAgICAgICAgcHVibGljIFk6IG51bWJlcjtcclxuXHJcbiAgICAgICAgcHVibGljIE1vdmUoZGlyZWN0aW9uOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5Ub3A6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ZLS07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuQm90dG9tOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuWSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLkxlZnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5YLS07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5YKys7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnTW92ZSB3aGVyZT8nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gXCJZb3UgaGF2ZSBtb3ZlZCBcIiArIGRpcmVjdGlvbiArIFwiLlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJHYW1lTWFwLnRzXCIvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiR2FtZU1hcFN0YXRlLnRzXCIvPlxyXG5cclxubW9kdWxlIENtMmsxNSB7XHJcbiAgZXhwb3J0IGNsYXNzIEdhbWUge1xyXG4gICAgcHJpdmF0ZSBtYXA6IEdhbWVNYXA7XHJcbiAgICBwcml2YXRlIHN0YXRlOiBHYW1lTWFwU3RhdGU7XHJcbiAgICBwcml2YXRlIGNvbW1hbmRzOiB7IFtrZXk6IHN0cmluZ106IChhcmdzKSA9PiBhbnkgfTtcclxuXHJcbiAgICAvLyB1aVxyXG4gICAgcHJpdmF0ZSBtZXNzYWdlRWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG1hcDogSFRNTERpdkVsZW1lbnQsIGlucHV0OiBIVE1MVGV4dEFyZWFFbGVtZW50LCBtZXNzYWdlOiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnZ2FtZSBjb25zdHJ1Y3RvcicpO1xyXG5cclxuICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBHYW1lTWFwU3RhdGUoMjAsMjApO1xyXG4gICAgICB0aGlzLmNvbW1hbmRzID0ge307XHJcbiAgICAgIHRoaXMubWFwID0gbmV3IEdhbWVNYXAobWFwLCB0aGlzLnN0YXRlKTtcclxuICAgICAgdGhpcy5tYXAuRGlzcGxheSgpO1xyXG4gICAgICB0aGlzLm1lc3NhZ2VFbGVtZW50ID0gbWVzc2FnZTtcclxuXHJcbiAgICAgIGlucHV0Lm9ua2V5ZG93biA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAxMykge1xyXG4gICAgICAgICAgdmFyIGNvbW1hbmQgPSBpbnB1dC52YWx1ZTtcclxuICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICB0aGlzLm9uQ29tbWFuZC5jYWxsKHRoaXMsIGNvbW1hbmQpO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVnaXN0ZXJDb21tYW5kcygpIHtcclxuICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoJ21vdmUnLCB0aGlzLm1vdmVDb21tYW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlZ2lzdGVyQ29tbWFuZChrZXk6IHN0cmluZywgY29tbWFuZDogKGFyZ3MpID0+IGFueSkge1xyXG4gICAgICB0aGlzLmNvbW1hbmRzW2tleV0gPSBjb21tYW5kLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNvbW1hbmQodGV4dCkge1xyXG4gICAgICB2YXIgcGFydHMgPSB0ZXh0LnNwbGl0KFwiIFwiKTtcclxuICAgICAgdmFyIGNvbW1hbmQgPSBwYXJ0c1swXTtcclxuICAgICAgdmFyIGFyZ3MgPSBwYXJ0cy5sZW5ndGggPiAxID8gcGFydHMuc3BsaWNlKDEsIHBhcnRzLmxlbmd0aCAtIDEpIDogW107XHJcbiAgICAgIGlmICh0aGlzLmNvbW1hbmRzW2NvbW1hbmRdKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY29tbWFuZHNbY29tbWFuZF0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlKHJlc3VsdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlTm9Db21tYW5kKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1vdmVDb21tYW5kKGRpcmVjdGlvbikge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5zdGF0ZS5Nb3ZlUGxheWVyKGRpcmVjdGlvbik7XHJcbiAgICAgIHRoaXMuc3RhdGUuVGlsZXNbdGhpcy5zdGF0ZS5QbGF5ZXIuWF1bdGhpcy5zdGF0ZS5QbGF5ZXIuWV0uVmlzaXRlZCA9IHRydWU7XHJcblxyXG4gICAgICB0aGlzLm1hcC5EaXNwbGF5KCk7XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWVzc2FnZSh0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgaWYgKHRleHQpIHtcclxuICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcm93LmlubmVyVGV4dCA9IHRleHQ7XHJcblxyXG4gICAgICAgIHRoaXMubWVzc2FnZUVsZW1lbnQuYXBwZW5kQ2hpbGQocm93KTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VFbGVtZW50LnNjcm9sbFRvcCA9IHRoaXMubWVzc2FnZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5tZXNzYWdlRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VOb0NvbW1hbmQoKSB7XHJcbiAgICAgIHZhciBtZXNzYWdlcyA9IFtcclxuICAgICAgICBcIndoYXQ/XCIsXHJcbiAgICAgICAgXCJ1aG0uLi5cIixcclxuICAgICAgICBcIm5vcGVcIixcclxuICAgICAgICBcImkgZG9udCB0aGluayBzb1wiXHJcbiAgICAgIF07XHJcblxyXG4gICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1lc3NhZ2VzLmxlbmd0aCldO1xyXG4gICAgICB0aGlzLm1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIkdhbWUudHNcIi8+XHJcbm1vZHVsZSBDbTJrMTUge1xyXG4gIHZhciBjb21tYW5kSW5wdXQgPSA8SFRNTFRleHRBcmVhRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWFuZCcpO1xyXG4gIHZhciBtYXAgPSA8SFRNTERpdkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpO1xyXG4gIHZhciBtZXNzYWdlID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJyk7XHJcbiAgdmFyIGdhbWUgPSBuZXcgQ20yazE1LkdhbWUobWFwLCBjb21tYW5kSW5wdXQsIG1lc3NhZ2UpO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
