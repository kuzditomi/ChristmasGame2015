var Cm2k15;
(function (Cm2k15) {
    var GameTile = (function () {
        function GameTile(row, col, size, element) {
            //console.log('gametile constructor:' + row + ',' + col);
            this.element = element;
            this.initialize(row, col, size);
        }
        GameTile.prototype.initialize = function (row, col, size) {
            this.element.style.top = row * size + 'px';
            this.element.style.left = col * size + 'px';
            this.element.style.width = this.element.style.height = size + 'px';
            this.element.className = 'tile';
        };
        GameTile.prototype.Reset = function () {
            this.element.innerText = "";
        };
        GameTile.prototype.Set = function (text) {
            this.element.innerText = text;
        };
        GameTile.prototype.SetVisited = function (visited) {
            this.element.className = 'tile ' + (visited ? '' : 'dark');
        };
        return GameTile;
    })();
    Cm2k15.GameTile = GameTile;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="GameTile.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var GameMap = (function () {
        function GameMap(map, state) {
            // constants
            this.tileCount = 9;
            console.log('gamemap constructor');
            // initialize game state
            this.state = state;
            // create tile views
            var mapWidth = map.clientWidth;
            var tileSize = mapWidth / this.tileCount;
            this.tiles = [];
            for (var i = 0; i < this.tileCount; i++) {
                this.tiles.push([]);
                for (var j = 0; j < this.tileCount; j++) {
                    var element = document.createElement('div');
                    this.tiles[i][j] = new Cm2k15.GameTile(i, j, tileSize, element);
                    map.appendChild(element);
                }
            }
        }
        GameMap.prototype.Display = function () {
            var middle = Math.floor(this.tileCount / 2);
            var left = this.state.Player.X < (middle) ? 0
                : this.state.Player.X > (this.state.Width - middle) ? this.state.Width - this.tileCount
                    : this.state.Player.X - middle;
            var top = this.state.Player.Y < (middle) ? 0
                : this.state.Player.Y > (this.state.Height - middle) ? this.state.Height - this.tileCount
                    : this.state.Player.Y - middle;
            for (var i = 0; i < this.tileCount; i++) {
                for (var j = 0; j < this.tileCount; j++) {
                    var tile = this.tiles[i][j];
                    var tileState = this.state.Tiles[left + j][top + i];
                    if (top + i == this.state.Player.Y && left + j == this.state.Player.X) {
                        tile.Set('[x]');
                    }
                    else {
                        tile.Reset();
                    }
                    tile.SetVisited(tileState.Visited);
                }
            }
        };
        return GameMap;
    })();
    Cm2k15.GameMap = GameMap;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var GameMapState = (function () {
        function GameMapState(width, height) {
            this.Width = width;
            this.Height = height;
            this.Tiles = [];
            for (var i = 0; i < height; i++) {
                this.Tiles[i] = [];
                for (var j = 0; j < width; j++) {
                    this.Tiles[i][j] = new TileState();
                }
            }
            this.Player = new PlayerState();
            this.Player.X = 2;
            this.Player.Y = 2;
            this.Tiles[this.Player.X][this.Player.Y].Visited = true;
        }
        return GameMapState;
    })();
    Cm2k15.GameMapState = GameMapState;
    var TileState = (function () {
        function TileState() {
            this.Visited = false;
        }
        return TileState;
    })();
    var PlayerState = (function () {
        function PlayerState() {
        }
        PlayerState.prototype.Move = function (direction) {
            switch (direction) {
                case 'up':
                    this.Y--;
                    break;
                case 'down':
                    this.Y++;
                    break;
                case 'left':
                    this.X--;
                    break;
                case 'right':
                    this.X++;
                    break;
                default:
                    return 'Move where?';
            }
            return "You have moved " + direction + ".";
        };
        return PlayerState;
    })();
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="GameMap.ts"/>
/// <reference path="GameMapState.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var Game = (function () {
        function Game(map, input, message) {
            var _this = this;
            console.log('game constructor');
            this.state = new Cm2k15.GameMapState(20, 20);
            this.commands = {};
            this.map = new Cm2k15.GameMap(map, this.state);
            this.map.Display();
            this.messageElement = message;
            input.onkeydown = function (e) {
                if (e.keyCode == 13) {
                    var command = input.value;
                    input.value = '';
                    _this.onCommand.call(_this, command);
                    return false;
                }
            };
            this.registerCommands();
        }
        Game.prototype.registerCommands = function () {
            this.registerCommand('move', this.moveCommand);
        };
        Game.prototype.registerCommand = function (key, command) {
            this.commands[key] = command.bind(this);
        };
        Game.prototype.onCommand = function (text) {
            var parts = text.split(" ");
            var command = parts[0];
            var args = parts.length > 1 ? parts.splice(1, parts.length - 1) : [];
            if (this.commands[command]) {
                var result = this.commands[command].apply(this, args);
                this.message(result);
            }
            else {
                this.messageNoCommand();
            }
        };
        Game.prototype.moveCommand = function (direction) {
            var result = this.state.Player.Move(direction);
            this.state.Tiles[this.state.Player.X][this.state.Player.Y].Visited = true;
            this.map.Display();
            return result;
        };
        Game.prototype.message = function (text) {
            if (text) {
                var row = document.createElement('div');
                row.innerText = text;
                this.messageElement.appendChild(row);
                this.messageElement.scrollTop = this.messageElement.scrollHeight - this.messageElement.clientHeight;
            }
        };
        Game.prototype.messageNoCommand = function () {
            var messages = [
                "what?",
                "uhm...",
                "nope",
                "i dont think so"
            ];
            var message = messages[Math.floor(Math.random() * messages.length)];
            this.message(message);
        };
        return Game;
    })();
    Cm2k15.Game = Game;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="Game.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var commandInput = document.getElementById('command');
    var map = document.getElementById('map');
    var message = document.getElementById('message');
    var game = new Cm2k15.Game(map, commandInput, message);
})(Cm2k15 || (Cm2k15 = {}));

//# sourceMappingURL=data:application/json;base64,
