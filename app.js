var Cm2k15;
(function (Cm2k15) {
    var TileModel = (function () {
        function TileModel(tileType) {
            this.IsVisited = false;
            this.IsPlayer = false;
            this.Type = tileType;
        }
        return TileModel;
    })();
    Cm2k15.TileModel = TileModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var PlayerModel = (function () {
        function PlayerModel() {
        }
        PlayerModel.prototype.Move = function (direction) {
            switch (direction) {
                case Cm2k15.directions.Top:
                    this.Y--;
                    break;
                case Cm2k15.directions.Bottom:
                    this.Y++;
                    break;
                case Cm2k15.directions.Left:
                    this.X--;
                    break;
                case Cm2k15.directions.Right:
                    this.X++;
                    break;
                default:
                    return 'Move where?';
            }
            return "You have moved " + direction + ".";
        };
        return PlayerModel;
    })();
    Cm2k15.PlayerModel = PlayerModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    // Base class for pretty much everything on the map that has action
    var RoomBase = (function () {
        function RoomBase() {
        }
        return RoomBase;
    })();
    Cm2k15.RoomBase = RoomBase;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="RoomBase.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Cm2k15;
(function (Cm2k15) {
    var RoomModel = (function (_super) {
        __extends(RoomModel, _super);
        function RoomModel(description) {
            _super.call(this);
            this.Description = description;
        }
        return RoomModel;
    })(Cm2k15.RoomBase);
    Cm2k15.RoomModel = RoomModel;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="TileModel.ts"/>
/// <reference path="PlayerModel.ts"/>
/// <reference path="RoomModel.ts"/>
var Cm2k15;
(function (Cm2k15) {
    Cm2k15.map = [
        ['-', '-', '-', '-', '-', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8'],
        ['-', '-', '-', '-', '-', 'e9', 'e10', 'e11', 'e12', 'e13', 'e14', 'e15', 'e16'],
        ['-', 'm1', 'm2', 'm3', '-', 'e17', 'e17', 'e19', 'e20', 'e21', 'e22', 'e23', 'e24'],
        ['-', 'm4', 'm5', 'm6', '-', '-', '-', '-', 'u5', '-', '-', '-', '-'],
        ['-', 'm7', 'm8', 'u1', 'u1', 'u1', 'u2', 'u1', 'u3', 'u1', 'u1', 'u4', '-'],
        ['-', 'u5', '-', '-', '-', '-', 'u5', '-', '-', '-', '-', 'h1', 'h1'],
        ['-', 'u5', '-', '-', 'g1', 'g2', 'g3', 'g4', 'g5', '-', '-', 'h3', 'h4'],
        ['-', 'u5', '-', '-', 'g6', 'g7', 'g8', 'g9', 'g10', 'k4', 'k1', 'k1', 'k1'],
        ['-', 'u5', '-', '-', 'g11', 'g12', 'g13', 'g14', 'g15', 'k2', '-', '-', '-'],
        ['-', 'i1', 'i2', '-', '-', '-', 'l', '-', 'f1', 'k2', '-', '-', '-'],
        ['-', 'i3', 'i4', 'i5', 'u1', 'u1', 'u6', '-', 'f2', 'k2', '-', '-', '-'],
        ['k1', 'k1', 'k1', 'k1', 'k1', 'k1', 'kb', 'k1', 'k1', 'k3', '-', '-', '-'],
        ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
    ];
    Cm2k15.directions = {
        Top: 'up',
        Right: 'right',
        Bottom: 'down',
        Left: 'left'
    };
    var MapModel = (function () {
        function MapModel() {
            this.Width = Cm2k15.map.length;
            this.Height = Cm2k15.map.length;
            this.Tiles = [];
            for (var i = 0; i < this.Height; i++) {
                this.Tiles[i] = [];
                for (var j = 0; j < this.Width; j++) {
                    this.Tiles[i][j] = new Cm2k15.TileModel(Cm2k15.map[j][i]);
                }
            }
            this.Player = new Cm2k15.PlayerModel();
            this.Player.X = 6;
            this.Player.Y = 12;
            this.Tiles[this.Player.X][this.Player.Y].IsVisited = true;
            this.Rooms = [];
        }
        MapModel.prototype.MovePlayer = function (direction) {
            var response = this.Player.Move(direction);
            console.log('Player moved ' + this.Player.X + ':' + this.Player.Y);
            return response;
        };
        return MapModel;
    })();
    Cm2k15.MapModel = MapModel;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var TileView = (function () {
        function TileView(row, col, size, element, model) {
            this.element = element;
            this.content = '';
            this.model = model;
            this.initialize(row, col, size);
        }
        TileView.prototype.initialize = function (row, col, size) {
            this.element.style.top = row * size + 'px';
            this.element.style.left = col * size + 'px';
            this.element.style.width = this.element.style.height = size + 'px';
            this.element.className = 'tile';
        };
        TileView.prototype.Display = function () {
            if (this.model.IsVisited) {
                this.element.style.backgroundColor = '#e3e3e3';
                this.element.style.backgroundImage = "url('images/" + this.model.Type + ".png')";
            }
            else {
                this.element.style.background = '#363636';
            }
            if (this.model.IsPlayer) {
                this.element.innerText = '[x]';
            }
            else {
                this.element.innerText = '';
            }
        };
        return TileView;
    })();
    Cm2k15.TileView = TileView;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="TileView.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var MapView = (function () {
        function MapView(model) {
            // constants
            this.tileCount = 13;
            console.log('gamemap constructor');
            var mapElement = document.getElementById('map');
            var message = document.getElementById('message');
            // initialize game state
            this.model = model;
            // create tile views 
            var mapWidth = mapElement.clientWidth;
            var tileSize = mapWidth / this.tileCount;
            this.tiles = [];
            for (var i = 0; i < this.tileCount; i++) {
                this.tiles.push([]);
                for (var j = 0; j < this.tileCount; j++) {
                    var element = document.createElement('div');
                    this.tiles[i][j] = new Cm2k15.TileView(i, j, tileSize, element, this.model.Tiles[j][i]);
                    mapElement.appendChild(element);
                }
            }
        }
        MapView.prototype.Display = function () {
            // scrolling mechanism
            //var middle = Math.floor(this.tileCount / 2);
            //var left = this.model.Player.X < (middle) ? 0
            //  : this.model.Player.X > (this.model.Width - 1 - middle) ? this.model.Width - this.tileCount
            //    : this.model.Player.X - middle;
            //var top = this.model.Player.Y < (middle) ? 0
            //  : this.model.Player.Y > (this.model.Height - 1 - middle) ? this.model.Height - this.tileCount
            //  : this.model.Player.Y - middle;
            for (var i = 0; i < this.tileCount; i++) {
                for (var j = 0; j < this.tileCount; j++) {
                    var tile = this.tiles[i][j];
                    if (this.model.Player.X == i && this.model.Player.Y == j) {
                        this.model.Tiles[i][j].IsPlayer = true;
                    }
                    else {
                        this.model.Tiles[i][j].IsPlayer = false;
                    }
                    tile.Display();
                }
            }
        };
        return MapView;
    })();
    Cm2k15.MapView = MapView;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var RoomView = (function () {
        function RoomView() {
            this.roomElement = document.getElementById('room');
        }
        RoomView.prototype.Draw = function (room) {
            if (!room) {
                this.roomElement.innerText = "";
                return;
            }
            this.roomElement.innerText = room.Description;
        };
        return RoomView;
    })();
    Cm2k15.RoomView = RoomView;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="model/MapModel.ts"/>
/// <reference path="view/MapView.ts"/>
/// <reference path="view/RoomView.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var Game = (function () {
        function Game() {
            var _this = this;
            // get dom elements
            var input = document.getElementById('command');
            var message = document.getElementById('message');
            this.messageElement = message;
            // initialize state and commands
            this.mapModel = new Cm2k15.MapModel();
            this.commands = {};
            this.registerCommands();
            // subscribe events      
            input.onkeydown = function (e) {
                if (e.keyCode == 13) {
                    var command = input.value;
                    input.value = '';
                    _this.onCommand.call(_this, command);
                    return false;
                }
            };
            // create map view
            this.mapView = new Cm2k15.MapView(this.mapModel);
            this.mapView.Display();
            this.roomView = new Cm2k15.RoomView();
        }
        Game.prototype.registerCommands = function () {
            this.registerCommand('move', this.moveCommand);
        };
        Game.prototype.registerCommand = function (key, command) {
            this.commands[key] = command.bind(this);
        };
        Game.prototype.onCommand = function (text) {
            var parts = text.split(" ");
            var command = parts[0];
            var args = parts.length > 1 ? parts.splice(1, parts.length - 1) : [];
            if (this.commands[command]) {
                var result = this.commands[command].apply(this, args);
                this.message(result);
            }
            else {
                this.messageNoCommand();
            }
        };
        Game.prototype.moveCommand = function (direction) {
            var result = this.mapModel.MovePlayer(direction);
            var tile = this.mapModel.Tiles[this.mapModel.Player.X][this.mapModel.Player.Y];
            tile.IsVisited = true;
            //this.roomView.Draw(tile.Room);
            this.mapView.Display();
            return result;
        };
        Game.prototype.message = function (text) {
            if (text) {
                var row = document.createElement('div');
                row.innerText = text;
                this.messageElement.appendChild(row);
                this.messageElement.scrollTop = this.messageElement.scrollHeight - this.messageElement.clientHeight;
            }
        };
        Game.prototype.messageNoCommand = function () {
            var messages = [
                "what?",
                "uhm...",
                "nope",
                "i dont think so"
            ];
            var message = messages[Math.floor(Math.random() * messages.length)];
            this.message(message);
        };
        return Game;
    })();
    Cm2k15.Game = Game;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="Game.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var game = new Cm2k15.Game();
})(Cm2k15 || (Cm2k15 = {}));

//# sourceMappingURL=data:application/json;base64,
