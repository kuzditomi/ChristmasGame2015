var Cm2k15;
(function (Cm2k15) {
    var GameTile = (function () {
        function GameTile(row, col, size, element) {
            console.log('gametile constructor:' + row + ',' + col);
            this.element = element;
            this.initialize(row, col, size);
        }
        GameTile.prototype.initialize = function (row, col, size) {
            this.element.style.top = row * size + 'px';
            this.element.style.left = col * size + 'px';
            this.element.style.width = this.element.style.height = size + 'px';
            this.element.className = 'tile';
        };
        GameTile.prototype.Reset = function () {
            this.element.innerText = "";
        };
        GameTile.prototype.Set = function (text) {
            this.element.innerText = text;
        };
        return GameTile;
    })();
    Cm2k15.GameTile = GameTile;
})(Cm2k15 || (Cm2k15 = {}));
var Cm2k15;
(function (Cm2k15) {
    var GamePlayer = (function () {
        function GamePlayer() {
            console.log('player constructor');
            this.position = 2;
        }
        GamePlayer.prototype.GetPosition = function () {
            return this.position;
        };
        GamePlayer.prototype.Move = function () {
            this.position++;
        };
        return GamePlayer;
    })();
    Cm2k15.GamePlayer = GamePlayer;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="GameTile.ts"/>
/// <reference path="GamePlayer.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var GameMap = (function () {
        function GameMap(map, player) {
            this.tileCount = 8;
            console.log('gamemap constructor');
            var mapWidth = map.clientWidth;
            var tileSize = mapWidth / this.tileCount;
            this.player = player;
            this.tiles = [];
            for (var i = 0; i < this.tileCount; i++) {
                this.tiles.push([]);
                for (var j = 0; j < this.tileCount; j++) {
                    var element = document.createElement('div');
                    this.tiles[i][j] = new Cm2k15.GameTile(i, j, tileSize, element);
                    map.appendChild(element);
                }
            }
        }
        GameMap.prototype.Display = function () {
            for (var i = 0; i < this.tileCount; i++) {
                for (var j = 0; j < this.tileCount; j++) {
                    if (i == this.player.GetPosition() && j == this.player.GetPosition()) {
                        this.tiles[i][j].Set('[x]');
                    }
                    else {
                        this.tiles[i][j].Reset();
                    }
                }
            }
        };
        return GameMap;
    })();
    Cm2k15.GameMap = GameMap;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="GameMap.ts"/>
/// <reference path="GamePlayer.ts"/>
var Cm2k15;
(function (Cm2k15) {
    var Game = (function () {
        function Game(map, input) {
            var _this = this;
            console.log('game constructor');
            this.player = new Cm2k15.GamePlayer();
            this.map = new Cm2k15.GameMap(map, this.player);
            this.map.Display();
            input.onkeydown = function (e) {
                if (e.keyCode == 13) {
                    var command = input.value;
                    input.value = '';
                    _this.onCommand(command);
                    return false;
                }
            };
        }
        Game.prototype.onCommand = function (command) {
            console.log('Command: ' + command);
            if (command == 'move') {
                this.player.Move();
                this.map.Display();
            }
        };
        return Game;
    })();
    Cm2k15.Game = Game;
})(Cm2k15 || (Cm2k15 = {}));
/// <reference path="Game.ts"/>
var commandInput = document.getElementById('command');
var map = document.getElementById('map');
var game = new Cm2k15.Game(map, commandInput);

//# sourceMappingURL=data:application/json;base64,
